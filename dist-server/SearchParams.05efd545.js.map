{"version":3,"sources":["../src/components/useBreedList.js","../src/components/Pet.js","../src/components/Results.js","../src/components/SearchParams.js"],"names":["localCache","useBreedList","animal","breedList","setBreedList","requestBreedList","res","fetch","json","breeds","Pet","name","breed","images","location","id","hero","length","Results","pets","map","city","state","SearchParams","ANIMALS","Object","freeze","setLocation","setAnimal","setBreed","setPets","theme","setTheme","ThemeContext","requestPets","e","preventDefault","target","value","backgroundColor"],"mappings":"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","file":"SearchParams.05efd545.js","sourceRoot":"../server","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst localCache = {};\n\nexport default function useBreedList(animal) {\n  const [breedList, setBreedList] = useState([]);\n  // const [status, setStatus] = useState(\"unloaded\");\n\n  useEffect(() => {\n    if (!animal) {\n      setBreedList([]);\n    } else if (localCache[animal]) {\n      setBreedList(localCache[animal]);\n    } else {\n      requestBreedList();\n    }\n    async function requestBreedList() {\n      setBreedList([]);\n      // setStatus(\"loading\");\n\n      const res = await fetch(\n        `http://pets-v2.dev-apis.com/breeds?animal=${animal}`\n      );\n      const json = await res.json();\n      localCache[animal] = json.breeds || [];\n      setBreedList(localCache[animal]);\n      // setStatus(\"loaded\");\n    }\n  }, [animal]);\n\n  return [\n    breedList,\n    // status\n  ];\n}\n","import { Link } from \"react-router-dom\";\n\nconst Pet = ({ name, animal, breed, images, location, id }) => {\n  let hero = \"http://pets-images.dev-apis.com/pets/none.jpg\";\n  if (images.length) {\n    hero = images[0];\n  }\n\n  return (\n    <Link to={`/details/${id}`} className=\"pet\">\n      <div className=\"image-container\">\n        <img src={hero} alt={name} />\n      </div>\n      <div className=\"info\">\n        <h1>{name}</h1>\n        <h2>{`${animal} - ${breed} - ${location}`}</h2>\n      </div>\n    </Link>\n  );\n};\n\nexport default Pet;\n","import Pet from \"./Pet\";\n\nconst Results = ({ pets }) => {\n  return (\n    <div className=\"search\">\n      {!pets.length ? (\n        <h2>No Pets Found</h2>\n      ) : (\n        pets.map(({ name, animal, breed, id, images, city, state }) => (\n          <Pet\n            name={name}\n            animal={animal}\n            breed={breed}\n            key={id}\n            images={images}\n            location={`${city}, ${state}`}\n            id={id}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n``","import { useState, useEffect, useContext } from \"react\";\nimport ThemeContext from \"./ThemeContext\";\nimport useBreedList from \"./useBreedList\";\nimport Results from \"./Results\";\n\nconst ANIMALS = Object.freeze([\"bird\", \"cat\", \"dog\", \"rabbit\", \"reptile\"]);\n\nconst SearchParams = () => {\n  const [location, setLocation] = useState(\"\");\n  const [animal, setAnimal] = useState(\"\");\n  const [breed, setBreed] = useState(\"\");\n  const [pets, setPets] = useState([]);\n  const [breeds] = useBreedList(animal);\n  const [theme, setTheme] = useContext(ThemeContext);\n\n  useEffect(() => {\n    requestPets();\n  }, []); //eslint-disable-line react-hooks/exhaustive-deps\n\n  async function requestPets() {\n    const res = await fetch(\n      `http://pets-v2.dev-apis.com/pets?animal=${animal}&location=${location}&breed=${breed}`\n    );\n    const json = await res.json();\n    setPets(json.pets);\n  }\n\n  return (\n    <div className=\"search-params\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          requestPets();\n        }}\n      >\n        <label htmlFor=\"location\">\n          Location\n          <input\n            id=\"location\"\n            value={location}\n            placeholder=\"Location\"\n            onChange={(e) => setLocation(e.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"animal\">\n          Animal\n          <select\n            id=\"animal\"\n            value={animal}\n            onChange={(e) => setAnimal(e.target.value)}\n            onBlur={(e) => setAnimal(e.target.value)}\n          >\n            <option />\n            {ANIMALS.map((animal) => (\n              <option value={animal} key={animal}>\n                {animal}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"breed\">\n          Breed\n          <select\n            disabled={!breeds.length}\n            id=\"breed\"\n            value={breed}\n            onChange={(e) => setBreed(e.target.value)}\n            onBlur={(e) => setBreed(e.target.value)}\n          >\n            <option />\n            {breeds.map((breed) => (\n              <option value={breed} key={breed}>\n                {breed}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"theme\">\n          theme\n          <select\n            value={theme}\n            onChange={(e) => setTheme(e.target.value)}\n            onBlur={(e) => setTheme(e.target.value)}\n          >\n            <option value=\"darkblue\">Dark Blue</option>\n            <option value=\"mediumorchid\">Medium Orchid</option>\n            <option value=\"peru\">Peru</option>\n            <option value=\"chartreuse\">Chartreuse</option>\n          </select>\n        </label>\n        <button style={{ backgroundColor: theme }}>Submit</button>\n      </form>\n      <Results pets={pets} />\n    </div>\n  );\n};\nexport default SearchParams;\n"]}